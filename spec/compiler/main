f() {
  // we have comments
  foo = bar = 42;
  {
    foo = 10;
    baz = 10;
  }
  return foo + bar;
  return bar = 7;
}

g(){
  a = b =5;
  t = b + 5;
  foo(1, 2);
  return t+1;
}

b(x){a;{}}h(){{1;}{{{}}}}
--------------------------------------------------------------------------------
s(:program,
  s(:stmt,
    s(:expr,
      s(:assignment,
        s(:lvar, foo@8),
        s(:assignment,
          s(:lvar, bar@16),
          s(:number_literal, 42)))
  s(:block,
    s(:stmt,
      s(:expr,
        s(:assignment,
          s(:lvar, foo@8),
          s(:number_literal, 10)))
    s(:stmt,
      s(:expr,
        s(:assignment,
          s(:lvar, baz@24),
          s(:number_literal, 10))))
  s(:stmt,
    s(:return,
      s(:expr,
        s(:bin_op,
          +,
          s(:ident, foo@8),
          s(:ident, bar@16))))
  s(:stmt,
    s(:return,
      s(:expr,
        s(:assignment,
          s(:lvar, bar@16),
          s(:number_literal, 7)))))
--------------------------------------------------------------------------------
.intel_syntax noprefix
.globl main
main:
  push rbp
  mov rbp, rsp
  sub rsp, 24
  push 42
  pop rax
  mov [rbp-16], rax
  mov rax, [rbp-16]
  push rax
  pop rax
  mov [rbp-8], rax
  mov rax, [rbp-8]
  push rax
  push 10
  pop rax
  mov [rbp-8], rax
  mov rax, [rbp-8]
  push rax
  push 10
  pop rax
  mov [rbp-24], rax
  mov rax, [rbp-24]
  push rax
  pop rax
  mov rax, [rbp-8]
  push rax
  mov rax, [rbp-16]
  push rax
  pop rdi
  pop rax
  add rax, rdi
  push rax
  pop rax
  mov rsp, rbp
  pop rbp
  ret
  push 7
  pop rax
  mov [rbp-16], rax
  mov rax, [rbp-16]
  push rax
  pop rax
  mov rsp, rbp
  pop rbp
  ret
  pop rax
  mov rsp, rbp
  pop rbp
  ret
--------------------------------------------------------------------------------
52
